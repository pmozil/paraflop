#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#include "utils.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	int vertexSize;
    int lightsCount;
    float dTime;
    int width;
} cam;

layout(binding = 8, set=0) buffer PixelPayload { vec4 pixels[]; } pixels;

layout(location = 0) rayPayloadEXT RayPayload hitValue;

float random(vec2 st)
{
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * (cam.dTime * 100000));
}


void main()  {
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz / target.w), 0) ;

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

    const vec3 tmp_orig = origin.xyz;
    const vec3 tmp_dir = origin.xyz;

    vec3 color = vec3(0.0F);
    float reflection_coeff = 1.0F;
    vec4 hitPos = vec4(0.0F);
    vec3 col = vec3(0.0F);
    vec4 first_hit = vec4(0.0F);
    vec3 lum = vec3(0.0F);

	for (int i = 0; i < SAMPLES; i++) {
        reflection_coeff = 1.0F;
        for (int i = 0; i < MAX_REFLECTIONS; i++) {
		    traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
            if(length(hitValue.emission) < EPSILON || hitValue.distance < 0.0F) {
                break;
            }

            col += hitValue.color * hitValue.emission * reflection_coeff * length(hitValue.emission);

		    hitPos = origin + direction * hitValue.distance;
            reflection_coeff *= hitValue.reflector;

		    origin.xyz = hitPos.xyz + hitValue.normal * 0.001F;
            direction.xyz = normalize(reflect(direction.xyz, hitValue.normal));

		    vec3 add_dir =  normalize(vec3(
                    random(vec2(cam.dTime)),
                    random(vec2(cam.dTime)),
                    random(vec2(cam.dTime)))
                ) * (1 - hitValue.reflector) * hitValue.reflector;

            float dotp = dot(direction.xyz, add_dir);
            direction.xyz += add_dir * sign(dotp);

            lum += hitValue.emission;
            first_hit.xyz = int(i == 0) * hitPos.xyz;
            first_hit.w = int(i == 0) * hitValue.material;
        }
        color += col; 
		origin.xyz = tmp_orig;
        direction.xyz = tmp_dir;
	}

    color /= SAMPLES;
    lum /= (MAX_REFLECTIONS * SAMPLES);

    const uint coord = 2 * (gl_LaunchIDEXT.y * cam.width + gl_LaunchIDEXT.x);
    vec4 pixel = pixels.pixels[coord];
    vec4 data = pixels.pixels[coord + 1];
    float len = length(lum);

    if (length(pixel.xyz) > EPSILON &&
            data.w == first_hit.w) {
        pixel.w += len;
        if(random(vec2(cam.dTime)) <  len / pixel.w) {
            pixel.xyz = color;
        }
        for (int i = -2; i < 3; i++) {
            for (int j = -2; j < 3; j++) {
                const uint xy = coord + i * cam.width * 2 + j * 2;
                const vec4 px = pixels.pixels[xy];
                const vec4 d = pixels.pixels[xy + 1];
                if(data.w == d.w) {
                    pixel.w += px.w;
                    if(random(vec2(cam.dTime)) <  px.w / pixel.w) {
                        pixel.xyz = px.xyz;
                    }
                }
            }
        }
        data = first_hit;
    } else {
        pixel.xyz = color;
        pixel.w = len;
        data = vec4(-10.0F);
    }


    pixels.pixels[coord] = pixel;
    pixels.pixels[coord+1] = data;

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(pixel.xyz, 0.0));
}
