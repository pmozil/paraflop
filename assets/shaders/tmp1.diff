36d35
< 	vec4 d4 = vertices.v[m * index + 4];
43,44c42
<     v.texId = vec4(d3.w, d3.x, d3.y, d3.z);
<     v.normalId = vec4(d4.x);
---
>     v.texId = vec4(d2.w, d3.x, d3.y, d3.z);
50,52c48,51
<     uint rand = 1140671485 * seed + 12820;
<     rand = 1140671485 * rand + 128201;
<     rand = 1140671485 * rand + 128201163;
---
>     uint rand = seed;
>     for (int i = 0; i < 3; i++) {
>         rand = (1140671485 * rand + 128201163) % uint(pow(2, 23));
>     }
56c55,56
< void main() {
---
> void main()
> {
64a65
> 	vec3 normal = normalize(v0.normal * barycentricCoords.x + v1.normal * barycentricCoords.y + v2.normal * barycentricCoords.z);
66d66
<     vec3 normal = normalize(v0.normal * barycentricCoords.x + v1.normal * barycentricCoords.y + v2.normal * barycentricCoords.z);
69,85c69,77
<     vec3 tex_col = texture(sampler2D(textures[uint(v0.texId.y)], samp), uv * int(v0.texId.y != 0)).rgb;
< 
< 	color = tex_col * 3 + v0.color.xyz;
< 
<     // vec3 emissive_col = texture(sampler2D(textures[uint(v0.texId.z)], samp), uv * int(v0.texId.z != 0)).xyz;
<      vec3 edge1 = v1.pos - v0.pos;
<      vec3 edge2 = v2.pos - v1.pos;
<      vec2 deltaUV1 = v1.uv - v0.uv;
<      vec2 deltaUV2 = v2.uv - v1.uv;
<      float f = 1.0f / (deltaUV1.x * deltaUV2.y - deltaUV2.x * deltaUV1.y);
<      vec3 t1 = vec3(0.0F);
<      
<      t1.x = f * (deltaUV2.y * edge1.x - deltaUV1.y * edge2.x);
<      t1.y = f * (deltaUV2.y * edge1.y - deltaUV1.y * edge2.y);
<      t1.z = f * (deltaUV2.y * edge1.z - deltaUV1.y * edge2.z);
< 
<      mat3 TBN = mat3(normalize(t1), normalize(cross(normal, t1)), normal);
---
>     if (v0.texId.y > EPSILON && length(v0.color) > EPSILON) {
>         vec3 tex_col = texture(sampler2D(textures[uint(v0.texId.y)], samp), uv).xyz;
> 	    color = tex_col * 3 + v0.color.xyz;
>     } else if (length(v0.color) > EPSILON) {
>         color = v0.color.xyz;
>     } else if (v0.texId.y > EPSILON) {
>         vec3 tex_col = texture(sampler2D(textures[uint(v0.texId.y)], samp), uv).xyz;
> 	    color = tex_col * 3;
>     }
87,88c79,81
<      vec3 norm = texture(sampler2D(textures[uint(v0.normalId.x)], samp), uv * int(v0.normalId.x != 0)).rgb;
<      norm = normalize(norm) * 2.0 - 1.0;
---
>     if(v0.texId.z != 0) {
>         color += texture(sampler2D(textures[uint(v0.texId.z)], samp), uv).xyz;
>     }
90,93d82
<      if (length(norm) > EPSILON) {
<         normal = normalize(TBN * norm);
<      }
<     
103c92
<         uint idx = random(i + ubo.lightsCount) % ubo.lightsCount;
---
>         uint idx = random(ubo.lightsCount - i) % ubo.lightsCount;
105c94
<         vec4 lightPos = lights.l[idx];
---
>         vec4 lightPos = lights.l[i];
113,114c102
< 
< 	    if (shadowed) {
---
> 	    if (shadowed || light < EPSILON) {
121c109
<         lighting  += halfway_dot * light / LIGHT_SAMPLES_SQRT;
---
>         lighting  += 4 * halfway_dot * light / LIGHT_SAMPLES_SQRT;
129c117
<     hitValue.reflector = v0.texId.x / 200;
---
>     hitValue.reflector = length(color) / 9.0F;
